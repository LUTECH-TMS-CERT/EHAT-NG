[
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "MEDIUM",
        "exploitability": 10,
        "id": 1,
        "overview": "<paragraph>The OWASP guide [1] gives the following description for SQL Injection:</paragraph><paragraph>A SQL injection attack consists of insertion or &quot;injection&quot; of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to effect the execution of predefined SQL commands.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/SQL_Injection",
        "remediation": "<paragraph>The following is recommended to prevent SQL Injection:</paragraph><paragraph><bullet>Use of Prepared Statements (Parameterized Queries)</bullet></paragraph><paragraph><bullet>Use of Stored Procedures</bullet></paragraph><paragraph><bullet>Never trust user input, Escaping all User Supplied Input</bullet></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "SQL Injection",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 8,
        "discoverability": 10,
        "dread_total": 46,
        "effort": "LOW",
        "exploitability": 8,
        "id": 2,
        "overview": "<paragraph>The OWASP guide [1] gives the following description for Cross-Site Scripting:</paragraph><paragraph>Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.</paragraph><paragraph>An attacker can use XSS to send a malicious script to an unsuspecting user. The end user\u2019s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29",
        "remediation": "<paragraph>The following is recommended to remediate XSS vulnerabilities:</paragraph><paragraph><bullet>Never trust user input</bullet></paragraph><paragraph><bullet>Never insert untrusted data except in allowed locations</bullet></paragraph><paragraph><bullet>HTML escape before inserting untrusted data into HTML element content</bullet></paragraph><paragraph><bullet>Use whitelists in place for Black lists for input filtering</bullet></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "Cross Site Scripting (XSS)",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 8,
        "discoverability": 8,
        "dread_total": 44,
        "effort": "LOW",
        "exploitability": 8,
        "id": 3,
        "overview": "<paragraph>The OWASP guide [1] gives the following description for Insecure Direct Object Reference:</paragraph><paragraph>Applications frequently use the actual name or key of an object when generating web pages. Applications do not always verify the user is authorized for the target object. This results in an insecure direct object reference flaw. Testers can easily manipulate parameter values to detect such flaws and code analysis quickly shows whether authorization is properly verified.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Top_10_2010-A4-Insecure_Direct_Object_References",
        "remediation": "<paragraph>Use per user or session indirect object references. This prevents attackers from directly targeting unauthorized resources. For example, instead of using the resource\u2019s database key, a drop down list of six resources authorized for the current user could use the numbers 1 to 6 to indicate which value the user selected. The application has to map the per-user indirect reference back to the actual database key on the server. </paragraph><paragraph>Check access. Each use of a direct object reference from an untrusted source must include an access control check to ensure the user is authorized for the requested object.</paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "Direct Object References",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 3,
        "approved": true,
        "damage": 5,
        "discoverability": 8,
        "dread_total": 29,
        "effort": "LOW",
        "exploitability": 3,
        "id": 4,
        "overview": "<paragraph>While reviewing &lt;&lt;CUSTOMER&gt;&gt;'s web server, web servers were discovered to disclose the system's internal IP address via the Content-Location header. The disclosure of the systems internal IP address gives an adversary an indication of how the internal network my be addressed.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>It is recommended that &lt;&lt;CUSTOMER&gt;&gt; reconfigure their web servers to use the systems fully qualified domain name (FQDN).</paragraph>",
        "reproducability": 10,
        "risk": 2,
        "title": "Internal IP Address Disclosure",
        "type": "System Security"
    },
    {
        "affected_hosts": null,
        "affected_users": 6,
        "approved": true,
        "damage": 7,
        "discoverability": 10,
        "dread_total": 40,
        "effort": "LOW",
        "exploitability": 7,
        "id": 5,
        "overview": "<paragraph>Simple Network Management Protocol (SNMP) is a protocol used for managing devices on the network. SNMP uses community stings to access the devices in either read or write mode. While conducting the internal assessment, several devices were discovered with the default SNMP community stings of private and public. </paragraph><paragraph>An adversary can use this access to view or change the devices configuration. In some cases passwords and other sensitive information can be extracted from the device. This information is used by an attacker access to other systems within the origination.</paragraph>",
        "poc": "<paragraph>The following screenshot shows information obtained from the vulnerable system &lt;IP&gt;:</paragraph><paragraph>&lt;insert a screenshot&gt;</paragraph><paragraph></paragraph><paragraph>The following IP addresses were confirmed vulnerable:</paragraph><paragraph>&lt;insert list of IP addresses&gt;</paragraph>",
        "references": "",
        "remediation": "<paragraph>SNMP community stings should be treated the same as account passwords.</paragraph><paragraph>It is recommended that &lt;&lt;CUSTOMER&gt;&gt; implement the following password policy for SNMP configured devices:</paragraph><paragraph><bullet>Use alphanumeric, special characters and spaces to create the pass phrase</bullet></paragraph><paragraph><bullet>Use pass phrases at least 32 characters long</bullet> </paragraph><paragraph><bullet>Change the pass phrase frequently</bullet></paragraph><paragraph><bullet>Do not reuse pass phrases</bullet></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "SNMP Configured with Default Password",
        "type": "Network Services"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "LOW",
        "exploitability": 10,
        "id": 6,
        "overview": "<paragraph>The Tomcat account ${ACCOUNT_NAME_HERE} was found to be configured with a blank or default password. An adversary could use this account to gain access to the management interface and deploy a malicious web archive file (WAR) file and comprise the system.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>The default Tomcat account passwords should be configured with a strong pass phrase. The following guide lines can be used for creating a pass phrase:</paragraph><paragraph><bullet>Use alphanumeric, special characters and spaces to create the pass phrase</bullet></paragraph><paragraph><bullet>Use pass phrases at least 32 characters long</bullet> </paragraph><paragraph><bullet>Change the pass phrase frequently</bullet></paragraph><paragraph><bullet>Do not reuse pass phrases</bullet></paragraph>",
        "reproducability": 10,
        "risk": 3,
        "title": "Tomcat Manager with Default or Blank Passwords",
        "type": "System Security"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "LOW",
        "exploitability": 10,
        "id": 7,
        "overview": "<paragraph>Microsoft SQL server comes with a built in System Administrator (SA) account. By default the SA account has full privileges. During the assessment the SA account was found to have a default password of SA or blank. An adversary can use this account to gain administrator level access to the database and can lead to a potential comprise of the system.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>The default SA account should be disabled. It is recommended to use Windows Authentication.  If this is not possible due to business reasons, the SA account should be configured with a strong password. The following guide lines can be used for creating a strong password:</paragraph><paragraph><bullet>Use alphanumeric, special characters and spaces</bullet></paragraph><paragraph><bullet>Use a password that is at least 32 characters long</bullet> </paragraph><paragraph><bullet>Change the password frequently</bullet></paragraph><paragraph><bullet>Do not reuse previous passwords</bullet></paragraph>",
        "reproducability": 10,
        "risk": 3,
        "title": "Weak SA Password on MSSQL Server",
        "type": "Database"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 8,
        "dread_total": 42,
        "effort": "HARD",
        "exploitability": 5,
        "id": 8,
        "overview": "<paragraph>Egress filtering is used to restrict and monitor outbound traffic from one network to another. During the internal assessment, the consultants discovered it was able to make arbitrary connections to hosts on the Internet. This showed a lack of egress filtering in place on &lt;&lt;CUSTOMER&gt;&gt;'s network.  An adversary can leverage  this lack of egress filtering to exfiltrate data from the network.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>It is recommended that &lt;&lt;CUSTOMER&gt;&gt; implement an egress policy. The policy should deny all traffic by default and only allow approved traffic.  Only traffic necessary for business reasons should be allow out while all other traffic is denied.</paragraph>",
        "reproducability": 9,
        "risk": 3,
        "title": "Lack of Egress Filtering ",
        "type": "Network Security"
    },
    {
        "affected_hosts": null,
        "affected_users": 7,
        "approved": true,
        "damage": 7,
        "discoverability": 7,
        "dread_total": 35,
        "effort": "MEDIUM",
        "exploitability": 7,
        "id": 9,
        "overview": "<paragraph>Quoting from [1], a Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration and critical system files, limited by system operational access control. The attacker uses \u201c../\u201d sequences to move up to root directory, thus permitting navigation through the file system.</paragraph><paragraph>This attack can be executed with an external malicious code injected on the path, like the Resource Injection attack. To perform this attack it\u2019s not necessary to use a specific tool; attackers typically use a spider/crawler to detect all URLs available.</paragraph><paragraph>This attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "<paragraph>https://www.owasp.org/index.php/Path_Traversal</paragraph><paragraph>http://cwe.mitre.org/data/definitions/22.html</paragraph><paragraph>http://www.webappsec.org/projects/threat/classes/path_traversal.shtml</paragraph>",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 7,
        "risk": 3,
        "title": "Path Traversal",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 3,
        "approved": true,
        "damage": 3,
        "discoverability": 3,
        "dread_total": 15,
        "effort": "LOW",
        "exploitability": 3,
        "id": 10,
        "overview": "<paragraph>[1] The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 3,
        "risk": 1,
        "title": "Regular expression Denial of Service - ReDoS",
        "type": "Best Practice"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "LOW",
        "exploitability": 10,
        "id": 11,
        "overview": "<paragraph>While reviewing the configuration of externally facing network devices, the consultant noted that the inbound (or ingress) rule set allowed for an excessive number of applications or ports. This is a critical risk to the organization.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>It is recommended that &lt;&lt;CUSTOMER&gt;&gt; adopt a DENY unless required policy for inbound traffic.</paragraph>",
        "reproducability": 10,
        "risk": 0,
        "title": "Excessive Ingress Rule Set",
        "type": "Router Configuration"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "LOW",
        "exploitability": 10,
        "id": 12,
        "overview": "<paragraph>The following server endpoints use an insecure Java RMI endpoint allowing for unauthenticated remote code execution. </paragraph><paragraph>Quoting the exploit discussion from [1], the default configuration of the RMI Registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL. As it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java process.</paragraph><paragraph>RMI method calls do not support or require any sort of authentication.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_rmi_server.rb",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "Insecure Java RMI Endpoint",
        "type": "Network Services"
    },
    {
        "affected_hosts": null,
        "affected_users": 7,
        "approved": true,
        "damage": 7,
        "discoverability": 7,
        "dread_total": 35,
        "effort": "LOW",
        "exploitability": 7,
        "id": 13,
        "overview": "<paragraph>A number of services were identified which use a hardcoded password. The risk from this issue is that an attacker could login with an account from a hardcoded password.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 7,
        "risk": 0,
        "title": "Hard Coded Passwords in Use",
        "type": "Best Practice"
    },
    {
        "affected_hosts": null,
        "affected_users": 2,
        "approved": true,
        "damage": 2,
        "discoverability": 2,
        "dread_total": 10,
        "effort": "LOW",
        "exploitability": 2,
        "id": 14,
        "overview": "<paragraph>As discussed in Section 4.1 of the PCI DSS, SSLv2 cannot be used and will result in a failure of the host. There are numerous security risks associated with SSLv2 including:</paragraph><paragraph><bullet> No protection from against man-in-the-middle attacks during the handshake. </bullet></paragraph><paragraph><bullet> Weak MAC Construction </bullet></paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.pcisecuritystandards.org/pdfs/pcissc_assessors_nl_2008-11.pdf",
        "remediation": "<paragraph>Disable SSLv2 on all SSL endpoints.</paragraph>",
        "reproducability": 2,
        "risk": 1,
        "title": "SSL Server Supports SSLv2",
        "type": "Compliance"
    },
    {
        "affected_hosts": null,
        "affected_users": 3,
        "approved": true,
        "damage": 3,
        "discoverability": 3,
        "dread_total": 15,
        "effort": "LOW",
        "exploitability": 3,
        "id": 15,
        "overview": "<paragraph>A number of End of Life Operating Systems were found on the internal network (e.g. Microsoft Windows XP). The consultant abused the lack of patching on a subset of these systems to gain a foothold in the internal network.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 3,
        "risk": 3,
        "title": "End of Life Systems In Use",
        "type": "Network Internal"
    },
    {
        "affected_hosts": null,
        "affected_users": 5,
        "approved": true,
        "damage": 5,
        "discoverability": 5,
        "dread_total": 25,
        "effort": "LOW",
        "exploitability": 5,
        "id": 16,
        "overview": "<paragraph>An open mail relay is an SMTP server configured in such a way that it allows anyone on the Internet to send e-mail through it, not just mail destined to or originating from known users [1]. The risk to &lt;&lt;CUSTOMER&gt;&gt; is in the form of corporate integrity. Furthermore, &lt;&lt;CUSTOMER&gt;&gt; IPs maybe listed blacklisted as a SPAM host or malicious source. </paragraph><paragraph>There is no business value in an Open Mail Relay.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://en.wikipedia.org/wiki/Open_mail_relay",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 5,
        "risk": 1,
        "title": "Open Mail Relay Identified",
        "type": "Network Services"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "LOW",
        "exploitability": 10,
        "id": 17,
        "overview": "<paragraph>An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, port scanning from the perspective of the machine where the parser is located, and other system impacts.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "XML External Entity (XXE) Processing ",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 1,
        "approved": true,
        "damage": 1,
        "discoverability": 1,
        "dread_total": 5,
        "effort": "LOW",
        "exploitability": 1,
        "id": 18,
        "overview": "<paragraph>During this assessment it was found that almost no logging or system auditing is in place. A mature system monitoring and logging process is critical to understand and analyze the implications from a security incident. Furthermore, it is an important step in the security maturity of an organization.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Logging_Cheat_Sheet",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 1,
        "risk": 4,
        "title": "Lack of System Monitoring or Logging",
        "type": "Logging and Auditing"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 19,
        "overview": "<paragraph>During the physical component of the assessment the consultant identified unencrypted backups stored in an unlocked closet. This could allow an attacker to steal thousands of &lt;&lt;Super Secret datas&gt;&gt;. </paragraph><paragraph>This is a critical risk to any organization. The references discussion outlines examples of this issue from the real world.</paragraph>",
        "poc": "<paragraph>The following pictures show the backup tape storage:</paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Unencrypted Backups Tapes (Storage Closet)",
        "type": "Physical"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "LOW",
        "exploitability": 10,
        "id": 20,
        "overview": "<paragraph>[1] Phishing is misrepresentation where the criminal uses social engineering to appear as a trusted identity. They leverage the trust to gain valuable information; usually details of accounts, or enough information to open accounts, obtain loans, or buy goods through e-commerce sites.</paragraph><paragraph>[1] Up to 5% of users seem to be lured into these attacks, so it can be quite profitable for scammers \u2013 many of whom send millions of scam e-mails a day.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Phishing",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "Phishing Attack ",
        "type": "Social Engineering"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 21,
        "overview": "<paragraph>The parameter --- is vulnerable to Javascript Injection, allowing attackers to include arbitrary JavaScript payloads in the applicationâs context. This issue can be easily exploited by unauthenticated remote attackers (Access Vector: Network) to create arbitrary malicious links that, once browsed by a user, (User Interaction: Required) will execute client-side code within the victimâs web browser.  A successful XSS attack could be employed to extract sensitive data (e.g. session cookies, personal data) or modify the web content showed by the target site.  (Confidentiality: High, Integrity: Low, Availability: None)</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Javascript Injection",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 22,
        "overview": "<paragraph>The application allows the upload of malicious files without detecting, stopping or deleting them with an adequate anti-malware solution. This security issue was identified by uploading the EICAR Standard Anti-Virus Test File, which was developed by the European Institute for Computer Antivirus Research (EICAR) and Computer Antivirus Research Organization (CARO) in order to test the response of computer antivirus programs.  Instead of using a real malware, which could impact the target application and system, this test file allows to verify the implemented anti-malware software without employing a real computer virus. Since anti-malware programmers set the EICAR string as a verified virus, similar to other identified signatures, a compliant virus scanner will detect it as if it found a harmful virus.  This issue can be exploited by remote unauthenticated users (Attack Vector: Network, Attack Complexity: Low, Privileges Required: None), but to cause any impact the malicious file has to be executed by a user or a service (User Interaction: Required). The final impact of such attack scenario will depend heavily on the specific malware employed, the privileges of the affected user and the information stored on the infected server (Confidentiality: Low, Integrity: Low, Availability: Low).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Malicious File Upload",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 23,
        "overview": "<paragraph>The application form  --- does not implement a CAPTCHA, allowing remote authenticated attackers (Attack Vector: Network, Privileges Required: Low) to trivially send an unlimited amount of requests in order to slow down or block the system (Availability: Low).  It is worth highlighting that such scenario is easy to implement and automate (Attack Complexity: Low) and does not rely on any user interaction to work (User Interaction: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Feature Abuse",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 24,
        "overview": "<paragraph>The remote server supports the SSLv3 protocol, which are considered not adequately secure to be employed on critical assets. Those protocols are also affected by the vulnerability known as POODLE (Padding Oracle On Downgraded Legacy Encryption), which might allow the decryption of the transmitted data (Confidentiality: High, Integrity: None, Availability: None).  Furthermore, the employed digital certificate is not generated by a known Certificate Authority, thus is not recognised as valid by web browsers. This issue nullifies the benefits provided by SSL/TLS.  To exploit these security issues an attacker has to be adequately positioned within the victimâs network (Attack Vector: Adjacent, Attack Complexity: High, Privileges Required: High) and has to wait until the user transmits the sensitive data (User Interaction: Required). Furthermore, the necessary time to fully complete this scenario is extremely long and could be performed only by motivated attackers with  enough resources.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "SSL/TLS Issues",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 25,
        "overview": "<paragraph>The application does not handle correctly all the exceptions, resulting in stack traces being returned within HTTP responses and shown to remote users (Attack Vector: Network, Attack Complexity: High, Privilege Required: None).  This information is hard to exploit and it rarely happens (Attack Complexity: High) and do not has a big impact on CIA parameters (Confidentiality: Low, Integrity: None, Availability: None) but could allow unauthenticated attackers to gather useful information that could facilitate the development and execution of further attacks.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Stack Trace",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 26,
        "overview": "<paragraph>The application does not properly validate user input sent to the identified resource, allowing remote attackers (Attack Vector: Network, Privileges Required: None) to easily inject arbitrary content (Attack Complexity: Low) that will be included in the next HTTP response. Since the application also accepts line termination characters (i.e. %0A), it is possible to add additional headers underneath the current one.      It might also be possible to inject valid HTML content that will be executed by the web browser (Confidentiality: Low). However, the most easy way to exploit the identified issue is to redirect the victims towards any external domains (User Interaction: Required, Scope: Changed), as demonstrated by the URL: <URL></paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Header Injection",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 27,
        "overview": "<paragraph>The web application authenticates a user without first invalidating the existing session ID, thereby continuing to use the session ID already associated with the user. This means that a remotely unauthenticated attacker (Attack Vector: Network) can force a known session ID on a user (User Interaction: Required) so that, once the user authenticates, the attacker has access to the authenticated session (Confidentiality: Low, Integrity: Low, Availability: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Session Fixation",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 28,
        "overview": "<paragraph>The parameter parameter of the page is vulnerable to Reflected Cross-Site Scripting (XSS), allowing attackers to include arbitrary JavaScript payloads in the applicationâs context. This issue can be easily exploited by unauthenticated remote attackers (Attack Vector: Network, Privileges Required: None) to create arbitrary malicious links that, once browsed by a user (User Interaction: Required), will execute client-side code within the victimâs web browser. The attacker is not required to use advanced techniques, since the application does not perform any validation on the supplied input (Attack Complexity: Low).  A successful XSS attack could be employed to extract sensitive data (e.g. session cookies, personal data) (Confidentiality: Low) or modify the web content showed by the target site (Integrity: Low).  The following payload was employed as a proof of concept during the tests and generates a simple alert: </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Reflected Cross Site Scripting",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 29,
        "overview": "<paragraph>The PDF files saved after the login and/or after a request of intervention are statically saved on the remote server and can be accessed by any unauthenticated and anonymous users that know their filename (Attack Vector: Network, Attack Complexity: Low, Privileges Required: None).  The application does not implement any security mechanism to verify that users have the necessary privileges before allowing access to those files.  However, the data included in those files is not critical and could not be employed to further escalate the attack scenario (Confidentiality: Low, Integrity: None, Availability: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Unauthenticated File Access",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 30,
        "overview": "<paragraph>The application is configured to allow Directory Listing on the folder --- , allowing authenticated attackers (Attack Vector: Network, Attack Complexity: Low, Privileges Required: None) to read all its contents, including the ones on its subdirectories.  This configuration issue can be directly abused (User Interaction: None, Exploitability: High) via a normal web browser by visiting the identified resource.  Even though the test did not identify any sensitive data within the affected directories (Confidentiality: High, Integrity: None, Availability: None), attackers could still find helpful information or it might be added in the future. </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Directory Listing",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 31,
        "overview": "<paragraph>The application authentication form allows web browsers to locally store users' credentials. This configuration can be verified by checking the lack of the attribute autocomplete=off either within the password or form tag.   The application authentication form allows web browsers to locally store users' credentials. This functionality could be exploited by attackers to extract these credentials after gaining access to the victimâs computer (Scope: Changed) if the user has allowed the browser to store the information (User Interaction: Required). For remote unauthenticated attackers (Attack Vector: Network, Privileges Required: None) this is possible by leveraging existing Cross-Site Scripting (XSS) [VID 24021-24038] or using malware to steal the stored credentials. This attack scenario will result in the compromise of the victimâs credentials and, hence, his account (Confidentiality: High, Integrity: Low, Availability: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Password Autocomplete Enabled",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 32,
        "overview": "<paragraph>The application does not properly validate the values within its parameters, allowing remote unauthenticated attackers (Attack Vector: Network, Privileges Required: None) to directly perform Path Traversal attacks and access different directories on the remote server (Attack Complexity: Low, User Interaction: None). VERIFY------>For example, the above directory can be reached with the '../' value that is accepted by the application. <------ VERIFY      The contents of the Path Traversal targets are then included inside the HTTP response. This issue can be abused to read arbitrary files stored on the remote system possibly accessing sensitive and critical data. Exploiting the vulnerability it was not possible to access to system user's password of db configuration files (Confidentiality: Low). Integrity and Availability CIA parameters are not impacted by this vulnerability (Integrity: None, Availability: None).   The local file accessed as a proof of concept was reached with the following payload: --- </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Local File Inclusion",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 33,
        "overview": "<paragraph>Server Side Request Forgery (SSRF) is a vulnerability that appears when an attacker has the ability to create requests from the vulnerable server. Usually, SSRF attacks target internal systems behind the firewall that are normally inaccessible from the outside world. SSRF also allow to access services from the same server that is listening on the loopback interface.      The application is vulnerable to SSRF, allowing unauthenticated remote attackers (Attack Vector: Network, Privileges Required: None) to easily access resources (Attack Complexity: Low) from the <APP> instance (Scope: Changed) installed on the same remote server (Confidentiality: Low, Integrity: None, Availability: None). This instance and its resources are not directly reachable from outside users, but can be accessed by the remote system.  This security issue has been exploited, as a proof of concept, to access several files, otherwise unreachable by external users.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Server Side Request Forgery (SSRF)",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 34,
        "overview": "<paragraph>The application allows users to send their authentication credentials (i.e. username and password) over the unencrypted HTTP protocol.  This configuration allows attackers - adequately positioned within the victim's local network (Attack Vector: Adjacent, Attack Complexity: High, Privileges Required: None) - to intercept the user's authentication credentials when sent by the victim (User Interaction: Required) and, ultimately, completely compromising their accounts (Confidentiality: High, Integrity: Low, Availability: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Credentials Transported over an Unencrypted Channel",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 35,
        "overview": "<paragraph>The application transmits information over unencrypted connections, making them vulnerable to interception. An attacker could leverage a MITM attack (Attack Vector: Adjacent), in order to intercept all the informations transmitted in cleartext. In this example we intercepted the amount of stocks purchased and the operative password to perform all the user operations.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Informations Transmitted in Clear Text",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 36,
        "overview": "<paragraph>The application's --- interface is Internet exposed. This enable unauthenticated remote attackers (Attack Vector: Adjacent, Privileges Required: None) to perform bruteforce attacks to obtains administrative access to the interface. The attack complexity (Attack Complexity: High) can be high because the attacker does not know the administrative account. Furthermore, obtaining the right administrative user-password combination can require a large number of interactions with the application. To perform the attack no user interaction is required (User Interaction: None). Accessing with administrative credentials can hit confidentiality, integrity but not availability (Confidentiality: Low, Integrity: High, Availability: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Exposed administrative interface",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 37,
        "overview": "<paragraph>The application does not implement a lockout mechanism to prevent Password Guessing / Brute-Forcing attacks, allowing remote unauthenticated attackers (Attack Vector: Network, Privileges Required: None) to perform illimitate authentication attempts until the correct credentials are identified (Confidentiality: Low).  This security issue can be exploited with existing tools and does not rely on any interaction from the applicationâs users (User Interaction: None).  To demonstrate this issue, <NUMBER_OF_REQUESTS> failed login requests have been performed through Burp Suite, followed by a correct one which successfully authenticated the user. This effectively shows the lack of a security mechanism.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Missing Lockout Mechanism",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 38,
        "overview": "<paragraph>The application does not implement a lockout mechanism to prevent Password Guessing / Brute-Forcing attacks, allowing remote unauthenticated attackers (Attack Vector: Network, Privileges Required: None) to perform illimitate authentication attempts until the correct credentials are identified (Confidentiality: Low).  This security issue can be exploited with existing tools and does not rely on any interaction from the applicationâs users (User Interaction: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Weak lockout mechanism",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 39,
        "overview": "<paragraph>The application does not implement cache-control http headers, allowing the browser to store pages for offline view. A remote unauthenticated attacked (Attack Vector: Network) could send a malware to the target victim (Access complexity: High, User Interaction: Required) in order to obtain the browser cached pages and the informations within. (Confidentiality: Low)</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Browser Cache weakness",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 40,
        "overview": "<paragraph>The web server includes specific information concerning the application's infrastructure within headers sent in HTTP responses. This information could allow attackers to trivially determine the employed software versions and identify known vulnerabilities, or to develop targeted attacks.  The web server includes specific information available to all remote users (Attack Vector: Network, Privilege Required: None) concerning the applicationâs infrastructure within the <HEADERS> sent in HTTP responses.  This information is hard to exploit (Attack Complexity: High) and do not has a big impact on CIA parameters (Confidentiality: Low, Integrity: None, Availability: None) but could allow unauthenticated attackers to determine the exact versions of the software employed and identify possible known vulnerabilities.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Exposed software version",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 41,
        "overview": "<paragraph>The ---- is freely exposed on the remote server and accessible by any unauthenticated user (Attack Vector: Network, Privileges Required: None).  This information does not generate a direct security threat (Confidentiality: None, Integrity: None, Availability: None), but could could provide additional information that could ease attackers in the development of further attacks.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Unreferenced Resource",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 42,
        "overview": "<paragraph>The application exposes two resources that will try to decrypt any string provided by the user. These resources receives the encrypted username and encrypted password of the current user, decrypt them and then generate automatic login links and forms to access applications stored on external servers. The resource involved is the following: - URL The parameter eu represents the encrypted username, and the parameter ep the encrypted password. If an attacker manages to intercept the encrypted username or encrypted password of a victim user, he/she could abuse the functionality to decrypt them and then log in with the newly discovered victim's credentials.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Padding Oracle",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 43,
        "overview": "<paragraph>An authenticated user can see the last performed actions made by other users (encoded in base64), simply changing the fiscal code inside the http request(Attack Vector: Network, Privilege Required: Low, Attack complexity: Low). This allow an attacker to gather anagraphic data without having the proper authorizations to do so. (Confidentiality: Low, Integrity: None, Availability: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Authorization bypass",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 44,
        "overview": "<paragraph>The webservice is vulnerable to XML entity expansion vulnerability which allows authenticated attackers (Attack Vector: Adjacent, Privileges Required: Low, User Interaction: None) to define entities which reference other entities defined within the document. If this is done recursively to a significant depth, the XML parser will consume increasing amounts of resources possibly causing a denial of service (Availability: High, Scope: Changed). Confidentiality and Integrity are not impacted by this vulnerability (Confidentiality: None, Integrity: None). The attacker is not required to use advanced techniques, since the web service does not perform any validation on the supplied input (Attack Complexity: Low). Blocking the DOCTYPE tag is necessary in order to protect all the parameters of the application.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "XML entity expansion",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 45,
        "overview": "<paragraph>The webservice is vulnerable to XML external entity injection vulnerability which allows authenticated adjacent attackers (Attack Vector: Adjacent, Privileges Required: Low, User Interaction: None) to read files from the server filesystem (Scope: Changed) with the same privileges of the user which runs the service (Confidentiality: High, Availability: None, Integrity: None). The attacker is not required to use advanced techniques, since the XML parser processes external resources (Attack Complexity: Low). In order to validate the vulnerability, the content of the file C:/windows/win.ini has been read. Preventing the definition of external resources is necessary in order to protect all the parameters of the application.  The following payload was employed as a proof of concept during the tests: --- </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "XML external entity injection (XXE)",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 46,
        "overview": "<paragraph>The identified resource is vulnerable to HQL Injection, which allows remote authenticated attackers (Attack Vector: Network, Privileges Required: Low) to modify the result of the search queries with the underlying database without additional requirements (User Interaction: None). The attacker will not directly impact the application, focusing the attack on its database (Scope: Changed), however this kind of attack is complicated since it requires the attacker to perform some research on the hibernate sintax used by the application. A successful attack could give access to the stored data (Confidentiality: High), including user and personal data, but without the privileges to edit them and impact the service (Integrity: None, Availability: None). As a proof of concept, the identified injection has been used to modify the search quesry results.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "HQL Injection",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 47,
        "overview": "<paragraph>An overly permissive crossdomain.xml file on a domain that serves sensitive content is a major security risk. It exposes the domain hosting the improperly configured crossomain.xml file to information disclosure and request forgery. Attackers cannot only forge requests, they can read responses. This means the attacker can retrieve any information the authenticated user has access to, including account information, documents and files, and anti-CSRF tokens if they are used.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "RIA cross domain policy (crossdomain.xml)",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 48,
        "overview": "<paragraph>The application sets the --- session cookie without the Secure attribute, which prevents to transmit session cookies over unencrypted communication channels.      It is possible for adjacent attackers (Attack Vector:Adjacent) to retrieve the value of a victim's cookie by Man-In-The-Middle attacks (Privileges Required: None, Attack Complexity: High, Scope: Unchanged). This attack scenario will result in the hijacking of the victim's authenticated session (Confidentiality: Low, Integrity: None, Availability: None). However, this scenario requires  some interaction from the user, who needs to perform login operations on the application (User Interaction: Required). </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Missing Cookie Attribute (Secure)",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 49,
        "overview": "<paragraph>The application sets the --- session cookie without the Secure attribute, which prevents to transmit session cookies over unencrypted communication channels.      It is possible for adjacent attackers (Attack Vector:Adjacent) to retrieve the value of a victim's cookie by Man-In-The-Middle attacks (Privileges Required: None, Attack Complexity: High, Scope: Unchanged). This attack scenario will result in the hijacking of the victim's authenticated session (Confidentiality: Low, Integrity: None, Availability: None). However, this scenario requires  some interaction from the user, who needs to perform login operations on the application (User Interaction: Required). </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Missing Cookie Attribute (Secure)",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 50,
        "overview": "<paragraph>The --- POST parameter in URL: ---  is vulnerable to Stored Cross-Site Scripting (XSS), allowing attackers to include arbitrary JavaScript payloads in the applicationâs context. This issue can be easily exploited by authenticated remote attackers (Attack Vector: Network, Privileges Required: Low) to create arbitrary malicious folders that, once viewed by any user (User Interaction: Required), will execute client-side code within the victimâs web browser (Scope: Changed). The attacker is required to use advanced techniques, since the application does perform some sort of input validation against simple payloads like <script>alert()</script> (Attack Complexity: High). A successful XSS attack could be employed to extract sensitive data (e.g. session cookies, personal data) (Confidentiality: Low) or modify the web content showed by the target site (Integrity: Low), or deface the entire user logged in home page (Availability: Low). The following payload was employed as a proof of concept during the tests and generates a simple alert: --- </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Stored Cross Site Scripting",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 51,
        "overview": "<paragraph>The password change page does not implement any policy to prevent user to modify password with a weak one. The result of this is that it is possible for a user to change her/him password with a one composed by only one character '1'. This vulnerability can be exploited by a remote (Attack Vector: Network) attacker because weak password are easy to guess or crack with standard bruteforce attacks (Attack Complexity: Low). Guessing or bruteforcing the password, an attacker can obtain the privileges of the exploited account on website (Scope: Unchanged) without any user interaction (User Interaction: None). So, in the worst case, he can use the website to view the attacked user's files (Confidentiality: Low) or to modify it (Integrity: Low). Availability is not impacted by this vulnerability (Availability: None).</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Weak Password Policy",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 52,
        "overview": "<paragraph>When an authenticated user tries to logout from the application an exception occur and the user remains logged in.   This is dangerous because an attacker could use this vulnerability in conjunction with other vulnerabilities to steal the user's session. An example is an XSS attack with the help of an e-mail sent from internet to an authenticated user.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Logout Functionality (exception during the logout)",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 53,
        "overview": "<paragraph>The server also supports several weak ciphers which are considered not adequately secure to be employed. This might allow the decryption of the transmitted data (Confidentiality: Low, Integrity: None, Availability: None). The weak ciphers are: * *  To exploit these security issues an attacker has to be adequately positioned within the victimâs network (Attack Vector: Adjacent, Attack Complexity: High, Privileges Required: None) and has to wait until the user transmits the sensitive data (User Interaction: Required). Furthermore, the necessary time to fully complete this scenario is extremely long and could be performed only by motivated attackers with enough resources. The typical attack scenario involves the actuation of an ARP spoofing attack in order to capture the user's network traffic directed to the application. If a weak algorithm was employed in the communication then try to bruteforce the encrypted traffic.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "SSL/TLS Issues (weak ciphers)",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 54,
        "overview": "<paragraph>The application disclose if a specific account is registered within the system or not through its error messages during the authentication process. A remote unauthenticated attacker (Attack Vector: Network) can try to guess active usernames (Attack complexity: high) and later perform password bruteforcing attacks to gain unauthorized access. (Confidentiality:High, Integrity: Low, Availability: None)</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Account Enumeration - Login",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 55,
        "overview": "<paragraph>The application does not implement anti clickjacking measures, all the pages are vulnerable. It is possible for an attacker to load another page over a clickjacked paged in a transparent layer. In this way the victim of attack think that he/she is clicking visible button, while he/she is performing actions on the hidden/invisible page. (User Interaction: Required, Integrity: Low). This attack is dangerous because using a similar technique it is possible to hijack keystrokes. Using a carefully crafted combination of stylesheets, iframes and textboxes the victim of the attack can be deceived to insert credentials into an invisible form controlled by a remote attacker. (Attack Vector: Network, Attack Complexity: High)</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Clickjacking (X-Frame-Options missing field)",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 56,
        "overview": "<paragraph>The application does not implement any anti-CSRF mechanism, allowing an attacker to craft CSRF requests in any page.  By embedding a vulnerable request into a malicious (external) page an unauthenticated remote attacker (Attack Vector: Network) can force an end user to perform unwanted actions on a web application in which he/she is currently authenticated. A successful CSRF exploit can compromise end user data and operation, when it targets a normal user. If the targeted end user is the administrator account, a CSRF attack can compromise the entire web application (Confidentiality: Low,Integrity: Low, Availability: None) </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Cross site Request Forgery",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 57,
        "overview": "<paragraph>The application does not implement any HSTS http headers. This can allow an attacker to perform MITM attacks (Attack Vector: Adjacent, Attack Complexity: High, User Interaction: Required) using sslstrip in order to change the connection type from https to http and therefore read all the data in clear. (Confidentiality: High, Integrity: None, Availability: None)</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Http Strict Transport Security Missing",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 58,
        "overview": "<paragraph>Parameter <param> is written in cleartext in the URL, this will usually enable an attacker via a Man In The Middle attack (Attack Vector: Adjacent) to steal victim sessionid and access the application illegitimately. (Confidentiality: High, Integrity: Low, Availability: None)</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Exposed Session variable",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 59,
        "overview": "<paragraph>The web server allows http trace method, this can allow for Cross-Site Tracing (XST) attack, that involves the use of Cross-site Scripting (XSS) and the TRACE or TRACK HTTP methods. According to RFC 2616, 'TRACE allows the client to see what is being received at the other end of the request chain and use that data for testing or diagnostic information. the TRACK method works in the same way but is specific to Microsoft's IIS web server. XST could be used as a method to steal user's cookies via Cross-site Scripting (XSS) even if the cookie has the 'HttpOnly' flag set and/or exposes the user's Authorization header. </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "HTTP Trace method enabled",
        "type": "EHAT Legacy"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "LOW",
        "exploitability": 4,
        "id": 60,
        "overview": "<paragraph>The identified resource is vulnerable to SQL Injection, which allows remote unauthenticated attackers (Attack Vector: Network, Privileges Required: None) to interact with the underlying database without additional requirements (User Interaction: None)  The attacker will not directly impact the application, focusing the attack on its database (Scope: Changed), gaining access to the stored data (Confidentiality: High), including user and personal data, but without the privileges to edit them and impact the service (Integrity: None, Availability: None). As a proof of concept, the identified injection has been used to extract the DMBS banner.  The vulnerable parameter is ---, to exploit the vulnerability the full URL (with Parameters) is --- </paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "SQL Injection",
        "type": "EHAT Legacy"
    }
]
